{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>The Systematic Trading Toolkit (or short, STTK) is a set of open source modules that support quantitative research and the development and execution of systematic trading strategies.</p>"},{"location":"api-reference/overview/","title":"Overview","text":""},{"location":"contribute/cicd/","title":"CI/CD Pipeline","text":""},{"location":"contribute/cicd/#trunk-based-development","title":"Trunk-based Development","text":"<p>Trunk-based Development is a streamlined development practice where all developers collaborate on a single branch (here: <code>master</code>), and commit their changes frequently. This approach promotes continuous integration, reduces the risk of complex merge conflicts, and encourages faster delivery of features.</p>"},{"location":"contribute/cicd/#step-1-start-from-the-master-branch-and-pull-the-latest-changes","title":"Step 1: Start from the master branch and pull the latest changes","text":"<p>First, ensure that you're working on the latest version of the <code>master</code> branch:</p> <pre><code>git checkout master\n</code></pre> <p>This command switches your working directory to the <code>master</code> branch, which is the main branch in our trunk-based development workflow.</p> <p>Next, pull the latest changes from the remote repository:</p> <pre><code>git pull origin master\n</code></pre> <p>This command fetches and integrates changes from the remote <code>master</code> branch into your local <code>master</code> branch. It ensures that your local branch is up-to-date with any new commits made by other collaborators.</p>"},{"location":"contribute/cicd/#step-2-create-a-new-branch-for-your-feature-or-bugfix","title":"Step 2: Create a new branch for your feature or bugfix","text":"<p>Now, create a new branch where you can work on your changes without affecting the <code>master</code> branch:</p> <pre><code>git checkout -b feature-branch\n</code></pre> <p>This command creates a new branch called <code>feature-branch</code> and switches to it. The <code>-b</code> flag both creates and checks out the new branch in one step. The new branch is based on the current <code>master</code> branch.</p>"},{"location":"contribute/cicd/#step-3-work-on-your-changes-then-add-and-commit-them","title":"Step 3: Work on your changes, then add and commit them","text":"<p>After making the necessary changes to the code, you'll need to add and commit them:</p> <pre><code>git add .\n</code></pre> <p>This command stages all the changes in your working directory (represented by the .) for the next commit. Staging files tells Git to include them in the next commit.</p> <p>Next, commit the staged changes with a descriptive message:</p> <pre><code>git commit -m \"Describe the changes you made\"\n</code></pre> <p>This command creates a new commit with the changes you've staged. The <code>-m</code> flag allows you to include a commit message inline, which should clearly describe the changes you\u2019ve made.</p>"},{"location":"contribute/cicd/#step-4-switch-back-to-the-master-branch","title":"Step 4: Switch back to the master branch","text":"<p>After committing your changes, switch back to the <code>master</code> branch:</p> <pre><code>git checkout master\n</code></pre> <p>This command switches your working directory back to the master branch.</p>"},{"location":"contribute/cicd/#step-5-pull-the-latest-changes-from-the-remote-master-to-ensure-youre-up-to-date","title":"Step 5: Pull the latest changes from the remote master to ensure you're up-to-date","text":"<p>Before merging your changes, it's important to ensure that your <code>master</code> branch is up-to-date with the latest changes from the remote repository.</p> <pre><code>git pull origin master\n</code></pre> <p>This command fetches and merges any new commits from the remote <code>master</code> branch into your local <code>master</code> branch, ensuring it reflects the most current state of the project.</p>"},{"location":"contribute/cicd/#step-6-merge-your-feature-branch-into-the-master-branch","title":"Step 6: Merge your feature branch into the master branch","text":"<p>Now, merge the changes from your <code>feature-branch</code> into the <code>master</code> branch.</p> <pre><code>git merge feature-branch\n</code></pre> <p>This command merges the changes from <code>feature-branch</code> into the <code>master</code> branch. If there are any conflicts, Git will notify you, and you'll need to resolve them before completing the merge.</p>"},{"location":"contribute/cicd/#step-7-push-the-updated-master-branch-to-the-remote-repository","title":"Step 7: Push the updated master branch to the remote repository","text":"<p>Finally, push the updated <code>master</code> branch with your changes back to the remote repository:</p> <pre><code>git push origin master\n</code></pre> <p>This command uploads your local <code>master</code> branch commits to the remote repository, making your changes available to other collaborators.</p>"},{"location":"documentation/overview/","title":"Overview","text":""},{"location":"documentation/jupyter-research-tools/csv-high-low-bar-plotter/","title":"CSV High-Low Bar Plotter","text":""},{"location":"documentation/jupyter-research-tools/csv-inspector/","title":"CSV Inspector","text":""},{"location":"getting-started/overview/","title":"Overview","text":""},{"location":"getting-started/installation/docker/","title":"Installation via Docker","text":""},{"location":"getting-started/quickstart-guide/hello-world/","title":"Hello, World!","text":""},{"location":"getting-started/quickstart-guide/quickstart-guide-installation/","title":"Installation","text":""},{"location":"home/project-roadmap/","title":"Project Roadmap","text":""},{"location":"research/overview/","title":"Overview","text":""},{"location":"tutorials/overview/","title":"Overview","text":""},{"location":"tutorials/beginner-tutorials/high-low-bar-chart/","title":"Plotting a High-Low Bar Chart","text":""}]}