{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Quickstart Guide","text":"<p>The Systematic Trading Toolkit (STTK) is a set of open source modules that support quantitative research and the development and execution of systematic trading strategies. This Quickstart Guide will get you up and running on some of the Toolkit's notable features:</p> Expand and collapse info boxes <p>Use the button on the right side of the box to expand and collapse info boxes</p>"},{"location":"#install-via-pip","title":"Install via pip","text":"Create a project directory and a virtual environment first <p>Before using this library in your projects, you might first want to create a <code>sttk-testdrive</code> directory and a dedicated virtual environment to take this library for a spin:</p> <p>Step 1: Create a project directory. <pre><code>mkdir sttk-testdrive\ncd sttk-testdrive\n</code></pre></p> <p>Step 2: Create a virtual environment. <pre><code>python3 -m venv ./sttk-testenv\n</code></pre> This command will create a directory named <code>sttk-testdrive</code> (or any name you choose) containing the virtual environment in your local working directory: <pre><code>.\n\u2514\u2500\u2500 sttk-testenv\n    \u251c\u2500\u2500 bin\n    \u251c\u2500\u2500 include\n    \u251c\u2500\u2500 lib\n    \u2514\u2500\u2500 pyvenv.cfg\n</code></pre></p> <p>Step 3: Activate the virtual environment.</p> MacOS/LinuxWindows <pre><code>source sttk-testenv/bin/activate\n</code></pre> <pre><code>sttk-testenv\\Scripts\\activate\n</code></pre> <p>If you later want to deactivate the environment again, run: <pre><code>deactivate\n</code></pre></p> <p><code>sttk</code> can be installed via the <code>pip</code> package installer: <pre><code>pip install sttk\n</code></pre></p>"},{"location":"#download-historical-market-data","title":"Download Historical Market Data","text":"CLIJupyter Notebook <p>Step 1: Enter the Python interpreter in interactive mode inside the <code>sttk-testdrive</code> directory.</p> <pre><code>python3 #(1)!\n</code></pre> <ol> <li>If <code>python3</code> does not work, try <code>python</code> instead. If this works, make sure that this refers to Python 3 and not 2 by checking the indicated version number displayed at the start of the interactive interpreter.</li> </ol> <p>Step 2: Import the necessary module. <pre><code>import sttk.data.yfdownload as yfd\n</code></pre></p> <p>Step 3: Download a CSV file containing OHLC data from Yahoo Finance.</p> <pre><code>yfd.download_and_resample_yf_data(\n    stock_symbol = 'AAPL',\n    start_date = '2023-01-01',\n    end_date = '2023-12-31',\n    period = '1d',\n    data_dir = '.', #(1)!\n)\n</code></pre> <ol> <li>This guide assumes that you want to save the CSV file containing the downloaded historical market data in a subdirectory named <code>sttk-data</code> within your current working directory. If not, you need to specify the path in which the downloaded CSV files should be saved via the <code>data_dir</code> argument when calling the <code>yfd.download_and_resample_yf_data()</code> function.</li> </ol> <p>This will create a <code>sttk-data</code> directory inside your current working directory and save a file named <code>AAPL_historical_2023-01-01_2023-12-31_1d.csv</code> inside this directory.</p> <pre><code>.\n\u251c\u2500\u2500 sttk-data\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 AAPL_historical_2023-01-01_2023-12-31_1d.csv\n\u2514\u2500\u2500 sttk-testenv\n    \u251c\u2500\u2500 bin\n    \u251c\u2500\u2500 etc\n    \u251c\u2500\u2500 include\n    \u251c\u2500\u2500 lib\n    \u251c\u2500\u2500 pyvenv.cfg\n    \u2514\u2500\u2500 share\n</code></pre> <p>Step 4 (Optional): You can now inspect the downloaded CSV file with STTK's CSV inspector tool. <pre><code>import sttk.researchtools.csvinspector as csvi\n</code></pre> <pre><code>csvi.csvinspector(\n    csv_file_path = './sttk-data/AAPL_historical_2023-01-01_2023-12-31_1d.csv', \n)\n</code></pre></p> <p>Step 5 (Optional): Cleaning up.</p> <p>Delete the <code>sttk-data</code> folder: <pre><code>rm -r sttk-data\n</code></pre></p> <p>Deactivate the virtual environment (if desired): <pre><code>deactivate\n</code></pre></p> <p>It is convenient to use a Jupyter Notebook for conducting quantitative research with the Systematic Trading Toolkit. To do that, you need to install the <code>notebook</code> package.</p> <p>Step 1: Install <code>notebook</code> package. <pre><code>pip install notebook\n</code></pre></p> <p>Step 2: Create a new folder for saving your Jupyter Notebook(s): <pre><code>mkdir notebooks\ncd notebooks\n</code></pre></p> <p>Step 3: After having switched your current working directory to the <code>notebooks</code> directory, run: <pre><code>jupyter notebook --port=8888\n</code></pre> Now, a Jupyter Notebook server will run at <code>localhost:8888</code>, the port number should be changed if this port is already in use.</p> <p>Step 4: Open up a new Jupyter Notebook and select <code>Python 3 (ipykernel)</code> if asked to select a kernel.  Create new Notebook by clicking on <code>File&gt;New&gt;Notebook</code> </p> <p> Select: Python 3 (ipykernel) </p> <p>Step 5: Rename the Notebook file to <code>testdrive.ipynb</code> by clicking on <code>Untitled</code> in the left upper corner.</p> <p> Rename Notebook file to <code>testdrive.ipynb</code> </p> <p>The file structure within the <code>sttk-testdrive</code> directory should now look like this: <pre><code>.\n\u251c\u2500\u2500 notebooks\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 .ipynb_checkpoints\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 testdrive.ipynb\n\u2514\u2500\u2500 sttk-testenv\n    \u251c\u2500\u2500 bin\n    \u251c\u2500\u2500 etc\n    \u251c\u2500\u2500 include\n    \u251c\u2500\u2500 lib\n    \u251c\u2500\u2500 pyvenv.cfg\n    \u2514\u2500\u2500 share\n</code></pre></p> <p>Step 6: Import the necessary module. <pre><code>import sttk.data.yfdownload as yfd\n</code></pre></p> <p>Step 7: Download a CSV file containing OHLC data from Yahoo Finance.</p> <pre><code>yfd.download_and_resample_yf_data(\n    stock_symbol = 'AAPL',\n    start_date = '2023-01-01',\n    end_date = '2023-12-31',\n    period = '1d',\n    data_dir = '../.', #(1)!\n)\n</code></pre> <ol> <li>This guide assumes that you want to save the CSV file containing the downloaded historical market data in a subdirectory named <code>sttk-data</code> within your current working directory. If not, you need to specify the path in which the downloaded CSV files should be saved via the <code>data_dir</code> argument when calling the <code>yfd.download_and_resample_yf_data()</code> function. </li> </ol> <p> Jupyter Notebook cell input and output </p> <p>This will create a <code>sttk-data</code> directory inside your current working directory and save a file named <code>AAPL_historical_2023-01-01_2023-12-31_1d.csv</code> inside this directory. <pre><code>.\n\u251c\u2500\u2500 notebooks\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 .ipynb_checkpoints\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 testdrive.ipynb\n\u251c\u2500\u2500 sttk-data\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 AAPL_historical_2023-01-01_2023-12-31_1d.csv\n\u2514\u2500\u2500 sttk-testenv\n    \u251c\u2500\u2500 bin\n    \u251c\u2500\u2500 etc\n    \u251c\u2500\u2500 include\n    \u251c\u2500\u2500 lib\n    \u251c\u2500\u2500 pyvenv.cfg\n    \u2514\u2500\u2500 share\n</code></pre></p> <p>Step 8 (Optional): You can now inspect the downloaded CSV file with STTK's CSV inspector tool. <pre><code>import sttk.researchtools.csvinspector as csvi\n</code></pre> <pre><code>csvi.csvinspector(\n    csv_file_path = '.././sttk-data/AAPL_historical_2023-01-01_2023-12-31_1d.csv', \n)\n</code></pre></p> <p> Jupyter Notebook cell input and output </p> <p>Step 9 (Optional): Cleaning up.</p> <p>First, close and shut down the Jupyter Notebook.  Close and shut down Jupyter Notebook </p> <p>Then, shut down the Jupyter Notebook server.  Shut down Jupyter Notebook server </p> <p>Delete the <code>sttk-data</code> folder and delete the <code>notebooks</code> directory. <pre><code>cd ..\nrm -r sttk-data\nrm -r notebooks\n</code></pre></p> <p>If desired, deactivate the virtual environment. <pre><code>deactivate\n</code></pre></p>"},{"location":"api-reference/library-overview/","title":"Library Overview","text":"<pre><code>sttk/\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 data\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 yfdownload.py\n\u2514\u2500\u2500 researchtools\n    \u251c\u2500\u2500 __init__.py\n    \u2514\u2500\u2500 csvinspector.py\n</code></pre>"},{"location":"api-reference/data/yfdownload/","title":"yfdownload (Module)","text":""},{"location":"api-reference/data/yfdownload/#download_and_resample_yf_data-function","title":"download_and_resample_yf_data (Function)","text":"<pre><code>download_and_resample_yf_data(\n    stock_symbol: str = \"AAPL\",\n    start_date: Optional[str] = None,\n    end_date: Optional[str] = None,\n    period: str = \"1d\",\n    fallback_to_higher: bool = False,\n    include_resample_base_period: bool = False,\n    data_dir: Optional[str] = None\n) -&gt; None\n</code></pre>"},{"location":"api-reference/data/yfdownload/#summary","title":"Summary","text":"<p>Downloads historical market data from Yahoo Finance, resamples it to the desired period, and saves the data to a CSV file. The function automatically handles period fallback if the requested data period is unavailable.</p>"},{"location":"api-reference/data/yfdownload/#parameters","title":"Parameters","text":"<ul> <li><code>stock_symbol (str, optional)</code>: The ticker symbol of the stock to download data for. Defaults to \"AAPL\".</li> <li><code>start_date (Optional[str], optional)</code>: The start date for the data in YYYY-MM-DD format. Defaults to the start of the last full year.</li> <li><code>end_date (Optional[str], optional)</code>: The end date for the data in YYYY-MM-DD format. Defaults to the end of the last full year.</li> <li><code>period (str, optional)</code>: The desired resampling period (e.g., '4m' for 4 minutes, '2h' for 2 hours). Defaults to \"1d\".</li> <li><code>fallback_to_higher (bool, optional)</code>: Whether to fall back to the next higher period if data for the requested period is unavailable. Defaults to False.</li> <li><code>include_resample_base_period (bool, optional)</code>: Whether to include base period information in the filename if a fallback period is used. Defaults to False.</li> <li><code>data_dir (str, optional)</code>: Directory where the 'sttk-data' folder should be created. If None, the current working directory is used.</li> </ul>"},{"location":"api-reference/data/yfdownload/#returns","title":"Returns","text":"<ul> <li><code>None</code>: This function does not return any value. It saves the downloaded and resampled data to a CSV file.</li> </ul>"},{"location":"api-reference/data/yfdownload/#exceptions","title":"Exceptions","text":"<ul> <li><code>ValueError</code>: Raised if data cannot be downloaded for the specified date range or period.</li> <li><code>ModuleNotFoundError</code>: Raised if the sttk module cannot be found when trying to determine the save directory.</li> </ul>"},{"location":"api-reference/data/yfdownload/#determine_download_period-function","title":"determine_download_period (Function)","text":"<pre><code>determine_download_period(period: str) -&gt; str\n</code></pre>"},{"location":"api-reference/data/yfdownload/#summary_1","title":"Summary","text":"<p>Determines the appropriate download period based on the requested period. Matches the requested period to the closest available download period supported by Yahoo Finance.</p>"},{"location":"api-reference/data/yfdownload/#parameters_1","title":"Parameters","text":"<ul> <li><code>period (str)</code>: The requested period (e.g., '2m', '1h', '1d').</li> </ul>"},{"location":"api-reference/data/yfdownload/#returns_1","title":"Returns","text":"<ul> <li><code>str</code>: The appropriate download period supported by Yahoo Finance.</li> </ul>"},{"location":"api-reference/data/yfdownload/#exceptions_1","title":"Exceptions","text":"<ul> <li><code>ValueError</code>: Raised if the period format is not supported.</li> </ul>"},{"location":"api-reference/data/yfdownload/#get_next_lower_period-function","title":"get_next_lower_period (Function)","text":"<pre><code>get_next_lower_period(current_period: str, fallback_to_higher: bool) -&gt; Optional[str]\n</code></pre>"},{"location":"api-reference/data/yfdownload/#summary_2","title":"Summary","text":"<p>Returns the next lower available period if the current one is deprecated or unavailable. If fallback_to_higher is True, it will return the next higher available period.</p>"},{"location":"api-reference/data/yfdownload/#parameters_2","title":"Parameters","text":"<ul> <li> <p><code>current_period (str)</code>: The current download period that needs to be adjusted.</p> </li> <li> <p><code>fallback_to_higher (bool)</code>: Whether to fall back to a higher period if the current one is unavailable.</p> </li> </ul>"},{"location":"api-reference/data/yfdownload/#returns_2","title":"Returns","text":"<ul> <li><code>Optional[str]</code>: The next available period, or None if no further fallback is possible.</li> </ul>"},{"location":"api-reference/data/yfdownload/#resample_data-function","title":"resample_data (Function)","text":"<pre><code>resample_data(data: pd.DataFrame, period: str) -&gt; pd.DataFrame\n</code></pre>"},{"location":"api-reference/data/yfdownload/#summary_3","title":"Summary","text":"<p>Resamples the data to the desired period using Pandas' resample functionality.</p>"},{"location":"api-reference/data/yfdownload/#parameters_3","title":"Parameters","text":"<ul> <li> <p><code>data (pd.DataFrame)</code>: The data to be resampled.</p> </li> <li> <p><code>period (str)</code>: The desired resampling period (e.g., '2m', '1h', '2d').</p> </li> </ul>"},{"location":"api-reference/data/yfdownload/#returns_3","title":"Returns","text":"<ul> <li><code>pd.DataFrame</code>: The resampled data.</li> </ul>"},{"location":"api-reference/data/yfdownload/#save_to_csv-function","title":"save_to_csv (Function)","text":"<pre><code>save_to_csv(\n    data: pd.DataFrame,\n    stock_symbol: str,\n    start_date: str,\n    end_date: str,\n    original_period: str,\n    download_period: str,\n    include_resample_base_period: bool,\n    data_dir: Optional[str]\n) -&gt; None\n</code></pre>"},{"location":"api-reference/data/yfdownload/#summary_4","title":"Summary","text":"<p>Saves the resampled data to a CSV file with a descriptive filename in the sttk-data directory. If the sttk-data directory does not exist, it will be created.</p>"},{"location":"api-reference/data/yfdownload/#parameters_4","title":"Parameters","text":"<ul> <li> <p><code>data (pd.DataFrame)</code>: The resampled data to be saved.</p> </li> <li> <p><code>stock_symbol (str)</code>: The stock symbol (e.g., 'AAPL').</p> </li> <li> <p><code>start_date (str)</code>: The start date for the data range.</p> </li> <li> <p><code>end_date (str)</code>: The end date for the data range.</p> </li> <li> <p><code>original_period (str)</code>: The originally requested period (e.g., '2d').</p> </li> <li> <p><code>download_period (str)</code>: The period actually used to download the data (e.g., '1d').</p> </li> <li> <p><code>include_resample_base_period (bool)</code>: Whether to include base period information in the filename if a fallback period is used.</p> </li> <li> <p><code>data_dir (str, optional)</code>: Directory where the 'sttk-data' folder should be created. If None, the current working directory is used.</p> </li> </ul>"},{"location":"api-reference/data/yfdownload/#returns_4","title":"Returns","text":"<ul> <li><code>None</code>: This function does not return any value. It saves the data to a CSV file.</li> </ul>"},{"location":"api-reference/researchtools/csvinspector/","title":"csvinspector (Module)","text":""},{"location":"api-reference/researchtools/csvinspector/#csvinspector-function","title":"csvinspector (Function)","text":"<pre><code>csvinspector(\n    csv_file_path: str, \n    rows_to_display: Optional[int] = 5, \n    show_info: bool = True\n) -&gt; None\n</code></pre>"},{"location":"api-reference/researchtools/csvinspector/#summary","title":"Summary","text":"<p>The <code>csvinspector</code> function loads a CSV file into a Pandas DataFrame, optionally displays basic DataFrame information, and displays a specified number of rows. It is compatible with both Jupyter notebooks and standard Python environments.</p>"},{"location":"api-reference/researchtools/csvinspector/#parameters","title":"Parameters","text":"<ul> <li><code>csv_file_path (str)</code>: The path to the CSV file that you want to inspect.</li> <li><code>rows_to_display (Optional[int], default=5)</code>: The number of rows to display from the top of the DataFrame. If None, the function displays all rows. Defaults to 5.</li> <li><code>show_info (bool, default=True)</code>: A flag to determine whether to display basic DataFrame information, such as the number of rows, columns, and data types of each column. Defaults to True.</li> </ul>"},{"location":"api-reference/researchtools/csvinspector/#returns","title":"Returns","text":"<ul> <li><code>None</code>: This function does not return any value. It displays or prints the contents of the DataFrame and optionally its information.</li> </ul>"},{"location":"api-reference/researchtools/csvinspector/#exceptions","title":"Exceptions","text":"<ul> <li><code>ValueError</code>: Raised if the CSV file does not exist, is empty, or cannot be read as a valid CSV.</li> </ul>"},{"location":"contribute/cicd/","title":"CI/CD Pipeline","text":""},{"location":"contribute/cicd/#trunk-based-development","title":"Trunk-based Development","text":"<p>Trunk-based Development is a streamlined development practice where all developers collaborate on a single branch (here: <code>master</code>), and commit their changes frequently. This approach promotes continuous integration, reduces the risk of complex merge conflicts, and encourages faster delivery of features.</p>"},{"location":"contribute/cicd/#step-1-start-from-the-master-branch-and-pull-the-latest-changes","title":"Step 1: Start from the master branch and pull the latest changes","text":"<p>First, ensure that you're working on the latest version of the <code>master</code> branch: <pre><code>git checkout master\n</code></pre> This command switches your working directory to the <code>master</code> branch, which is the main branch in our trunk-based development workflow.</p> <p>Next, pull the latest changes from the remote repository: <pre><code>git pull origin master\n</code></pre> This command fetches and integrates changes from the remote <code>master</code> branch into your local <code>master</code> branch. It ensures that your local branch is up-to-date with any new commits made by other collaborators.</p>"},{"location":"contribute/cicd/#step-2-create-a-new-branch-for-your-feature-or-bugfix","title":"Step 2: Create a new branch for your feature or bugfix","text":"<p>Now, create a new branch where you can work on your changes without affecting the <code>master</code> branch: <pre><code>git checkout -b feature-branch\n</code></pre> This command creates a new branch called <code>feature-branch</code> and switches to it. The <code>-b</code> flag both creates and checks out the new branch in one step. The new branch is based on the current <code>master</code> branch.</p>"},{"location":"contribute/cicd/#step-3-work-on-your-changes-then-add-and-commit-them","title":"Step 3: Work on your changes, then add and commit them","text":"<p>After making the necessary changes to the code, you'll need to add and commit them: <pre><code>git add .\n</code></pre> This command stages all the changes in your working directory (represented by the .) for the next commit. Staging files tells Git to include them in the next commit.</p> <p>Next, commit the staged changes with a descriptive message: <pre><code>git commit -m \"Describe the changes you made\"\n</code></pre> This command creates a new commit with the changes you've staged. The <code>-m</code> flag allows you to include a commit message inline, which should clearly describe the changes you\u2019ve made.</p>"},{"location":"contribute/cicd/#step-4-switch-back-to-the-master-branch","title":"Step 4: Switch back to the master branch","text":"<p>After committing your changes, switch back to the <code>master</code> branch: <pre><code>git checkout master\n</code></pre> This command switches your working directory back to the master branch.</p>"},{"location":"contribute/cicd/#step-5-pull-the-latest-changes-from-the-remote-master-to-ensure-youre-up-to-date","title":"Step 5: Pull the latest changes from the remote master to ensure you're up-to-date","text":"<p>Before merging your changes, it's important to ensure that your <code>master</code> branch is up-to-date with the latest changes from the remote repository. <pre><code>git pull origin master\n</code></pre> This command fetches and merges any new commits from the remote <code>master</code> branch into your local <code>master</code> branch, ensuring it reflects the most current state of the project.</p>"},{"location":"contribute/cicd/#step-6-merge-your-feature-branch-into-the-master-branch","title":"Step 6: Merge your feature branch into the master branch","text":"<p>Now, merge the changes from your <code>feature-branch</code> into the <code>master</code> branch. <pre><code>git merge feature-branch\n</code></pre></p> <p>This command merges the changes from <code>feature-branch</code> into the <code>master</code> branch. If there are any conflicts, Git will notify you, and you'll need to resolve them before completing the merge.</p>"},{"location":"contribute/cicd/#step-7-push-the-updated-master-branch-to-the-remote-repository","title":"Step 7: Push the updated master branch to the remote repository","text":"<p>Finally, push the updated <code>master</code> branch with your changes back to the remote repository: <pre><code>git push origin master\n</code></pre> This command uploads your local <code>master</code> branch commits to the remote repository, making your changes available to other collaborators.</p>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>To install the <code>sttk</code> package, you have several options depending on your preferred method of package management. Below are the instructions for installing via <code>pip</code>, <code>poetry</code>, and from source.</p>"},{"location":"getting-started/installation/#install-via-pip","title":"Install via pip","text":"<p>To install <code>sttk</code> using <code>pip</code>, the Python package manager, run the following command: <pre><code>pip install sttk\n</code></pre> This command will install the latest version of <code>sttk</code> and its dependencies from the Python Package Index (PyPI).</p>"},{"location":"getting-started/installation/#install-via-poetry","title":"Install via poetry","text":"<p>If you are using <code>poetry</code> for dependency management and packaging, you can add <code>sttk</code> to your project's dependencies by running: <pre><code>poetry add sttk\n</code></pre> This command will add <code>sttk</code> to your <code>pyproject.toml</code> file and install it along with any other dependencies defined for your project.</p>"},{"location":"getting-started/installation/#install-from-source","title":"Install from Source","text":"<p>If you prefer to install sttk from the source, you can do so by following these steps:</p> <p>Step 1: Clone the repository from GitHub: <pre><code>git clone https://github.com/nilskujath/sttk.git\n</code></pre></p> <p>Step 2: Navigate to the project directory: <pre><code>cd sttk\n</code></pre></p> <p>Step 3: Install the package using <code>pip</code>: <pre><code>pip install .\n</code></pre></p>"}]}